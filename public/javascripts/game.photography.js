// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  jQuery(document).ready(function() {
    var addShotToInv, calculatePicValue, closeParent, currentGame, deg2rad, displayInv, distanceTravelled, endGame, endTurn, gameGlobal, generateMarkers, location, locations, mark, photo, photographyGame, player, processData, retrieveResources, setValue, updateMarkers;
    deg2rad = function(deg) {
      return deg * (Math.PI / 180);
    };
    distanceTravelled = function(from, to) {
      var R, a, c, dLat, dLng, dist, lat1, lat2, lng1, lng2;
      lat1 = from.lat;
      lng1 = from.lng;
      lat2 = to.lat;
      lng2 = to.lng;
      R = 6371;
      dLat = deg2rad(lat2 - lat1);
      dLng = deg2rad(lng2 - lng1);
      a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      dist = R * c;
      return dist;
    };
    location = (function() {
      function location(position, name, data1, icon) {
        this.position = position;
        this.name = name;
        this.data = data1;
        this.icon = icon;
        this.marker;
        this.value;
        this.travelExpense;
      }

      location.prototype.addTo = function(map) {
        var marker;
        if (this.icon) {
          marker = new google.maps.Marker({
            position: this.position,
            map: map,
            icon: this.icon,
            title: this.name
          });
        } else {
          marker = new google.maps.Marker({
            position: this.position,
            map: map,
            title: this.name
          });
        }
        this.marker = marker;
        return this.setListener(this.marker);
      };

      location.prototype.setListener = function(marker) {
        var self;
        self = this;
        marker.addListener('click', function() {
          return mark.moveTo(self);
        });
        return marker.addListener('mouseover', function() {
          $('#locationInfoOverlay #title').text(self.data.title);
          $('#locationInfoOverlay #position').text('Distance away ' + parseInt(distanceTravelled(mark.position, self.position)) + 'km');
          $('#locationInfoOverlay #value').text('Potential Revenue $' + self.value);
          $('#locationInfoOverlay #travelExpense').text('Travel Expense $' + parseInt((distanceTravelled(mark.position, self.position) * 0.6) / 10));
          return this.value = self.value;
        });
      };

      return location;

    })();
    player = (function(superClass) {
      extend(player, superClass);

      function player(position, name, data1, icon, stats1) {
        this.position = position;
        this.name = name;
        this.data = data1;
        this.icon = icon;
        this.stats = stats1;
        player.__super__.constructor.call(this, this.position, this.name, this.data, this.icon);
        this.playerMarker;
        this.inventory = [];
      }

      player.prototype.initTo = function(map) {
        return this.playerMarker = new google.maps.Marker({
          position: this.position,
          map: map,
          icon: this.icon,
          title: this.name,
          optimized: false,
          zIndex: 100
        });
      };

      player.prototype.moveTo = function(location) {
        var newStats;
        location.travelExpense = parseInt((distanceTravelled(this.position, location.position) * 0.6) / 10);
        this.position = location.position;
        this.playerAt = location;
        this.playerMarker.setPosition(new google.maps.LatLng(location.position.lat, location.position.lng));
        updateMarkers();
        $('#takePic').show();
        newStats = this.stats;
        newStats.CAB -= mark.playerAt.travelExpense;
        return this.updateStats(newStats);
      };

      player.prototype.updateStats = function(stats) {
        var assets, workingCapital;
        this.stats = stats;
        assets = parseInt(this.stats.assets + this.stats.CAB);
        workingCapital = parseInt(assets - this.stats.liabilities);
        $('#playerInfoOverlay #stats #CAB').text('Cash at Bank $' + parseInt(this.stats.CAB));
        $('#playerInfoOverlay #stats #liabilities').text('Current Liabilities $' + parseInt(this.stats.liabilities));
        $('#playerInfoOverlay #stats #assets').text('Current Assets $' + assets);
        $('#playerInfoOverlay #stats #workingCapital').text('Working Capital $' + workingCapital);
        if (workingCapital <= -1000 && this.stats.CAB <= 0) {
          return endGame();
        }
      };

      return player;

    })(location);
    photo = (function() {
      function photo(value, washed, img, title) {
        this.value = value;
        this.washed = washed;
        this.img = img;
        this.title = title;
      }

      return photo;

    })();
    photographyGame = (function() {
      function photographyGame(debug) {
        this.debug = debug;
      }

      photographyGame.prototype.init = function() {
        return retrieveResources(100).then(function(res) {
          return generateMarkers(processData(res));
        });
      };

      return photographyGame;

    })();
    retrieveResources = function(amount) {
      var reqParam;
      reqParam = {
        resource_id: '9913b881-d76d-43f5-acd6-3541a130853d',
        limit: amount
      };
      return $.ajax({
        url: 'https://data.gov.au/api/action/datastore_search',
        data: reqParam,
        dataType: 'jsonp',
        cache: true
      });
    };
    currentGame = new photographyGame(false);
    currentGame.init();
    mark = new player({
      lat: -25.363,
      lng: 151.044
    }, 'Mark', {
      'type': 'self'
    }, 'https://developers.google.com/maps/documentation/javascript/images/custom-marker.png');
    mark.initTo(googleMap);
    mark.updateStats({
      'CAB': 1000,
      'workingCapital': 0,
      'assets': 0,
      'liabilities': 300
    });
    locations = [];
    gameGlobal = {
      trackers: {
        monthPassed: 0,
        photosSold: 0,
        moneyEarned: 0
      },
      turnConsts: {
        interest: 1.5
      }
    };
    endGame = function() {
      $('#gameEnd p').text('You survived for ' + gameGlobal.trackers.monthPassed + ' Months, selling ' + gameGlobal.trackers.photosSold + ' photos and making over $' + gameGlobal.trackers.moneyEarned);
      return $('#gameEnd').show();
    };
    processData = function(data) {
      var item, j, len, processedData, ref;
      processedData = [];
      ref = data.result.records;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (item['dcterms:spatial']) {
          if (item['dcterms:spatial'].split(';')[1]) {
            processedData.push(item);
          }
        }
      }
      return processedData;
    };
    generateMarkers = function(data) {
      var i, j, lat, len, lng, marker, place;
      marker = [];
      i = 0;
      for (j = 0, len = data.length; j < len; j++) {
        place = data[j];
        lat = parseFloat(place['dcterms:spatial'].split(';')[1].split(',')[0]);
        lng = parseFloat(place['dcterms:spatial'].split(';')[1].split(',')[1]);
        marker[i] = new location({
          lat: lat,
          lng: lng
        }, place[0], {
          'title': place['dc:title'],
          'description': place['dc:description'],
          'img': place['150_pixel_jpg']
        });
        marker[i].addTo(googleMap);
        locations.push(marker[i]);
        setValue(marker[i]);
        i++;
      }
      updateMarkers();
    };
    setValue = function(location) {
      var rare;
      rare = Math.random() <= 0.1;
      if (rare) {
        return location.value = parseInt(Math.random() * distanceTravelled(mark.position, location.position) + 100);
      } else {
        return location.value = parseInt((Math.random() * distanceTravelled(mark.position, location.position) + 100) / 10);
      }
    };
    updateMarkers = function() {
      var hide, j, len, results, show;
      results = [];
      for (j = 0, len = locations.length; j < len; j++) {
        location = locations[j];
        hide = Math.random() >= 0.8;
        show = Math.random() <= 0.2;
        if (hide) {
          results.push(location.marker.setVisible(false));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    endTurn = function() {
      var j, len, newStats, results;
      gameGlobal.trackers.monthPassed += 1;
      gameGlobal.turnConsts.interest = (Math.random() * 5).toFixed(2);
      newStats = mark.stats;
      newStats.CAB -= mark.stats.liabilities;
      mark.updateStats(newStats);
      results = [];
      for (j = 0, len = locations.length; j < len; j++) {
        location = locations[j];
        results.push(location.marker.setVisible(true));
      }
      return results;
    };
    $('#takePic').click(function() {
      $('#takingPic .section3').css('width', (Math.floor(Math.random() * (10 + 2))) + 1 + '%');
      $('#takingPic .section2').css('width', (Math.floor(Math.random() * (19 + 2))) + '%');
      $('#takingPic .section4').css('width', (Math.floor(Math.random() * (19 + 2))) + '%');
      $('#takingPic .slider').css('left', 0);
      $('#takingPic .start, #takingPic .stop').prop('disabled', false);
      $('#takingPic .shotStats').hide();
      $('#takingPic').show();
      $('#takingPic .viewInv').hide();
      return $(this).hide();
    });
    addShotToInv = function(multiplier) {
      var newStats, photoValue, shotTaken;
      photoValue = mark.playerAt.value * multiplier;
      shotTaken = new photo(photoValue, false, mark.playerAt.data.img, mark.playerAt.data.title);
      mark.inventory.push(shotTaken);
      mark.playerAt.marker.setVisible(false);
      newStats = mark.stats;
      newStats.assets += photoValue;
      newStats.workingCapital -= mark.playerAt.travelExpense / 2;
      return mark.updateStats(newStats);
    };
    $('#takingPic .start').click(function() {
      $(this).prop('disabled', true);
      return $('#takingPic .slider').animate({
        'left': $('#takingPic .section1').width() + $('#takingPic .section2').width() + $('#takingPic .section3').width() + $('#takingPic .section4').width() + $('#takingPic .section5').width() + 'px'
      }, 1000, function() {
        return calculatePicValue();
      });
    });
    $('#takingPic .stop').click(function() {
      $(this).prop('disabled', true);
      $('#takingPic .slider').stop();
      return calculatePicValue();
    });
    calculatePicValue = function() {
      var inBlue, inGreen, multiplier, sliderPosition;
      $('#takingPic .viewInv').show();
      $('#takingPic .shotStats').show();
      multiplier = 1;
      sliderPosition = parseInt($('#takingPic .slider').css('left'), 10);
      inBlue = ($('#takingPic .section1').position().left + $('#takingPic .section1').width()) <= sliderPosition && sliderPosition <= $('#takingPic .section5').position().left;
      inGreen = ($('#takingPic .section2').position().left + $('#takingPic .section2').width()) <= sliderPosition && sliderPosition <= $('#takingPic .section4').position().left;
      if (inBlue && inGreen) {
        multiplier = 1.2;
        $('.shotStats').text('You take a high quailty photo, this will surely sell for more!');
      } else if (inBlue) {
        $('.shotStats').text('You take a average photo.');
      } else {
        multiplier = 0.8;
        $('.shotStats').text('The shot comes out all smudged...');
      }
      return addShotToInv(multiplier);
    };
    $('.viewInv').click(function() {
      closeParent(this);
      return displayInv();
    });
    $('#checkInv').click(function() {
      return displayInv();
    });
    displayInv = function() {
      var item, j, len, potentialValue, ref, sellableValue;
      $('#blockOverlay').show();
      $('#inventory .photo').remove();
      $('#inventory').show();
      potentialValue = 0;
      sellableValue = 0;
      ref = mark.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (!item.washed) {
          $('<img class="photo" src=' + item.img + '" value="' + item.value + '"/>').appendTo($('#inventory .cameraRoll'));
          potentialValue += item.value;
        } else {
          $('<img class="photo" src=' + item.img + '" value="' + item.value + '"/>').appendTo($('#inventory .washedPics'));
          sellableValue += item.value;
        }
      }
      $('#rollValue').text('Total value $' + parseInt(potentialValue + sellableValue));
      return $('#sellableValue').text('Sellable Pictures value $' + parseInt(sellableValue));
    };
    $('#endTurn').click(function() {
      $('#endTurnInfo p').text('End this month?');
      return $('#endTurnInfo').show();
    });
    $('#confirmEndTurn').click(function() {
      return endTurn();
    });
    $('#washPic').click(function() {
      var item, j, len, ref;
      if (mark.inventory.length === 0) {
        return alert('There are no pictures to wash');
      } else {
        ref = mark.inventory;
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          item.washed = true;
        }
        $('#endTurnInfo p').text('Washing photos ends this month. End this month?');
        return $('#endTurnInfo').show();
      }
    });
    $('#takeLoan').click(function() {
      $('#IR').text('Current interest rate ' + gameGlobal.turnConsts.interest + '%');
      return $('#loanOverlay').show();
    });
    $('#confirmLoan').click(function() {
      var newStats;
      newStats = mark.stats;
      newStats.liabilities += parseInt($('#loanInput').val()) + parseInt($('#loanInput').val()) * (gameGlobal.turnConsts.interest / 10);
      newStats.CAB += parseInt($('#loanInput').val());
      return mark.updateStats(newStats);
    });
    $('#sellPic').click(function() {
      var j, len, photosValue, ref, sellablePhotos;
      sellablePhotos = 0;
      photosValue = 0;
      ref = mark.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        photo = ref[j];
        if (photo.washed) {
          sellablePhotos += 1;
          photosValue += photo.value;
        }
      }
      $('#soldInfoOverlay p').text('Potential Earnings $' + photosValue + ' from ' + sellablePhotos + ' Photo/s');
      if (sellablePhotos === 0) {
        $('#soldInfoOverlay button').hide();
      } else {
        $('#soldInfoOverlay button').show();
      }
      return $('#soldInfoOverlay').show();
    });
    $('#sellPhotos').click(function() {
      var earningsAct, earningsEst, j, len, newInventory, newStats, photosSold, ref;
      photosSold = 0;
      earningsEst = 0;
      earningsAct = 0;
      newInventory = [];
      newStats = mark.stats;
      ref = mark.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        photo = ref[j];
        if (photo.washed) {
          earningsAct += parseInt(photo.value + (photo.value * Math.random()));
          earningsEst += photo.value;
          photosSold += 1;
          gameGlobal.trackers.photosSold += 1;
          gameGlobal.trackers.moneyEarned += earningsAct;
        } else {
          newInventory.push(photo);
        }
      }
      mark.inventory = newInventory;
      newStats.CAB += earningsAct;
      newStats.assets -= earningsEst;
      mark.updateStats(newStats);
      return $('#soldInfoOverlay p').text('Earned $' + earningsAct + ' from selling ' + photosSold + ' Photo/s');
    });
    $('.confirm, .close').click(function() {
      return closeParent(this);
    });
    closeParent = function(self) {
      $(self).parent().hide();
      return $('#blockOverlay').hide();
    };
    $('#actions').draggable();
    $('#actions').mousedown(function() {
      return $('#actions p').text('Actions');
    });
  });

}).call(this);
