// Generated by CoffeeScript 1.12.7

/*
@file
Handles the functionality of the photography game.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  jQuery(document).ready(function() {
    var addShotToInv, calculatePicValue, closeParent, currentGame, deg2rad, displayInv, distanceTravelled, effects, endGame, endTurn, event, eventManager, gameEvents, gameGlobal, gameInsanity, gameLocation, gamePhoto, gameTime, gameTutorial, generateMarkers, getParam, locations, photographyGame, player, playerInsanity, playerMarker, plusMode, processData, randomEvent, retrieveResources, saveItem, saveScore, setValue, showResStatus, storyMode, submitUserData, timeManager, tutorialHandler, updateMarkers, validData;
    event = (function() {

      /*
        Constructs the event object.
        @constructor
        @param {string} title
          Title of the event.
        @param {string} time
          The game time of when the event occurred.
        @param {string} content
          The description of the event.
        @param {boolean} special
          Whether if the event is a special event.
        @param {boolean} warn
          Whether if the event is a warning.
       */
      function event(title, time, content, special, warn) {
        this.title = title;
        this.time = time;
        this.content = content;
        this.special = special != null ? special : false;
        this.warn = warn != null ? warn : false;
      }

      return event;

    })();
    randomEvent = (function(superClass) {
      extend(randomEvent, superClass);

      function randomEvent(title, time, content, special, popup, chance, effects1) {
        this.title = title;
        this.time = time;
        this.content = content;
        this.special = special != null ? special : false;
        this.popup = popup != null ? popup : false;
        this.chance = chance;
        this.effects = effects1;
        randomEvent.__super__.constructor.call(this, this.title, this.time, this.content, this.special, this.warn);
      }

      return randomEvent;

    })(event);
    gamePhoto = (function() {

      /*
        Constructs the game photo object.
        @constructor
        @param {integer} value
          The value of the photo.
        @param {boolean} washed
          Whether if the photo has been washed
        @param {string} img
          The image associated with the photo.
        @param {string} title
          The title of the photo.
        @param {integer} quailty
          The quailty of the photo.
       */
      function gamePhoto(value1, washed, img1, title, quailty1) {
        this.value = value1;
        this.washed = washed;
        this.img = img1;
        this.title = title;
        this.quailty = quailty1;
      }

      return gamePhoto;

    })();

    /*
      Global variables and constants.
     */
    locations = [];
    validData = [];
    gameGlobal = {
      init: {
        isStory: false,
        isPlus: false,
        stats: {
          CAB: 1000,
          workingCapital: 0,
          assets: 0,
          liabilities: 600
        }
      },
      trackers: {
        monthPassed: 0,
        photosSold: 0,
        moneyEarned: 0
      },
      turnConsts: {
        interest: 1.5,
        pictureWashingTime: 14,
        stdLiabilities: 600,
        alert: false,
        randomEvents: [
          new randomEvent('Machine Gun Fire!', 'currentTime', 'You wake up in a cold sweat. The sound of a german machine gun barks out from the window. How coud this be? Germans in Australia? You grab your rifle from under your pillow and rush to the window. You ready your rifle and aim, looking for the enemy. BANG! BANG! BARK! YAP! You look at the neighbours small terrier. Barking...', false, true, 20, effects = {
            insanity: 20
          }), new randomEvent('German Bombs!', 'currentTime', 'A loud explosion shakes the ground and you see a building crumble into dust in the distance. Sirens. We have been attacked! You rush to see the chaos, pushing the bystanders aside. They are not running, strangely calm. Do they not recognize death when the see it? Then you see it. A construction crew. Dynamite.', false, true, 20, effects = {
            insanity: 30
          }), new randomEvent('Air raid!', 'currentTime', 'The sound of engines fills the air. The twins propellers of a German byplane. You look up to the sky, a small dot. It may be far now, but the machine guns will be upon us soon. Cover. Need to get safe. You yell to the people around you. GET INSIDE! GET INSIDE NOW! They look at you confused. They dont understand. You look up again. A toy. You look to your side, a car.', false, true, 20, effects = {
            insanity: 20
          }), new randomEvent('Landmines!', 'currentTime', 'You scan the ground carefully as you walk along the beaten dirt path. A habit you learned after one of your squadmate had his legs blown off by a German M24 mine. You stop. Under a pile of leaves you spot it. The glimmer of metal. Shrapnel to viciously tear you apart. You are no sapper but this could kill someone. You throw a rock a it. The empty can of beans rolls away.', false, true, 20, effects = {
            insanity: 10
          }), new randomEvent('Dazed', 'currentTime', 'You aim the camera at the young couple who had asked you for a picture. Slowly. 3. 2. 1. Click. FLASH. You open your eyes. The fields. The soldiers are readying for a charge. OVER THE TOP. You shake yourself awake. The couple is looking at you worryingly. How long was I out?', false, true, 20, effects = {
            insanity: 5
          }), new randomEvent('The enemy charges!', 'currentTime', 'You are pacing along the street. Footsteps... You turn round and see a man running after you. Yelling. Immediately you run at him. Disarm and subdue you think. Disarm. You tackle him to the ground. He falls with a thud. Subdue. You raise your fist. As you prepare to bring it down on your assailant. Its your wallet. "Please stop! You dropped your wallet! Take it!', false, true, 20, effects = {
            insanity: 20
          })
        ]
      }
    };

    /*
      Submits session data to the server. 
      @param {object} data 
        the data to be submitted.
    
      @return 
        AJAX deferred promise.
     */
    submitUserData = function(data) {
      return $.ajax({
        url: '/routes/user.php',
        type: 'POST',
        data: data
      });
    };

    /*
      Display the response status to the DOM
      @param {DOMElement} target
        The DOM element to display the response to.
    
      @param {object} res
        The response to display.
     */
    showResStatus = function(target, res) {
      if (res.status === 'success') {
        $(target).css('color', '');
        return $(target).text(res.message);
      } else {
        $(target).css('color', 'red');
        return $(target).text(res.message);
      }
    };

    /*
      Saves the current user score.
     */
    saveScore = function() {
      return submitUserData({
        method: 'saveScore',
        gameId: '2',
        value: this.score
      }).then(function(res) {
        return showResStatus('#gameEnd .status', JSON.parse(res));
      });
    };

    /*
      Saves the a item to the user's collection.
     */
    saveItem = function(img, des) {
      return submitUserData({
        method: 'saveItem',
        image: img,
        description: des
      }).then(function(res) {
        return showResStatus('#savePicOverlay .status', JSON.parse(res));
      });
    };

    /*
      Gets the value of the paramater in the query string of a GET request.
      @param {string} name 
        the key of the corrosponding value to retrieve.
    
      @return 
        The sorted array.
     */
    getParam = function(name) {
      var results;
      results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
      return results[1] || 0;
    };

    /*
      Retrieves the GET paramater from the query string. Sets up the interface and game constants accordingly.
     */
    try {
      storyMode = getParam('story') === 'true';
      plusMode = getParam('plus') === 'true';
      if (storyMode) {
        gameGlobal.init.isStory = true;
        $('.tutorial .init').text('Welcome to the photography game. As Mark, you must do your job for at least 6 month. Do not let your Working Capital drop below -$2000.');
        $('#playAgain').text('Continue');
        $('#playAgain').parent().attr('href', 'chapter3.html');
        $('.skip').show();
        $('.save').hide();
        $('#playAgain').addClass('continue');
      }
      if (getParam('diff') === 'extended') {
        gameGlobal.init.stats = {
          CAB: 2500,
          workingCapital: 0,
          assets: 0,
          liabilities: 1000
        };
      }
      if (plusMode) {
        gameGlobal.init.isPlus = true;
      }
    } catch (error) {}

    /*
      Skips the game when in story mode. Completes the chapter for the user.
     */
    $('.skip, .continue').click(function(e) {
      $('.continueScreen').show();
      $('#selectionArea, #gameArea').hide();
      return submitUserData({
        method: 'chapterComplete',
        chapterId: '2'
      }).then(function(res) {
        res = JSON.parse(res);
        if (res.status === 'success') {
          return 0;
        }
      });
    });

    /*
      Retrieves resources from the dataset.
      @param {integer} amount
        The amount of resources to retrieve.
    
      @return
        AJAX deferred promise.
     */
    retrieveResources = function(amount) {
      var reqParam;
      reqParam = {
        resource_id: '9913b881-d76d-43f5-acd6-3541a130853d',
        limit: amount
      };
      return $.ajax({
        url: 'https://data.gov.au/api/action/datastore_search',
        data: reqParam,
        dataType: 'jsonp',
        cache: true
      });
    };

    /*
      Converts degrees to radians.
      @param {float} deg
        The degree to convert to radians.
    
      @return
        The corrosponding radian value of the input.
     */
    deg2rad = function(deg) {
      return deg * (Math.PI / 180);
    };

    /*
      Calculates the distance travelled from two lat, lng coordinates.
      @param {object} from
        The initial lat, lng coordinates.
      @param {object} to
        The final lat, lng coordinates.
      @return
        The distance between the two points in km.
     */
    distanceTravelled = function(from, to) {
      var R, a, c, dLat, dLng, dist, lat1, lat2, lng1, lng2;
      lat1 = from.lat;
      lng1 = from.lng;
      lat2 = to.lat;
      lng2 = to.lng;
      R = 6371;
      dLat = deg2rad(lat2 - lat1);
      dLng = deg2rad(lng2 - lng1);
      a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      dist = R * c;
      return dist;
    };
    tutorialHandler = (function() {

      /*
        Constructs the game tutorial object.
        @constructor
      
        @param {DOMElement} domPanels
          The set of tutorial elements active in the DOM.
       */
      function tutorialHandler(domPanels) {
        this.domPanels = domPanels;
        this.step = 0;
      }


      /*
        Displays the panel in view.
       */

      tutorialHandler.prototype.init = function() {
        $(this.domPanels[this.step]).show();
        return this.setButton();
      };


      /*
        Switch to the next panel.
       */

      tutorialHandler.prototype.next = function() {
        this.step++;
        $(this.domPanels[this.step]).show();
        $(this.domPanels[this.step - 1]).hide();
        return this.setButton();
      };


      /*
        Switch to the previous panel
       */

      tutorialHandler.prototype.prev = function() {
        this.step--;
        $(this.domPanels[this.step]).show();
        $(this.domPanels[this.step + 1]).hide();
        return this.setButton();
      };


      /*
        Generates the avaliable buttons depending on the step.
        @see this.step
       */

      tutorialHandler.prototype.setButton = function() {
        this.domPanels.find('.buttonContainer').remove();
        if (this.step === 0) {
          return this.domPanels.append($('<div class="buttonContainer"> <button class="prev hidden">Previous</button> <button class="next">Next</button> </div>'));
        } else if (this.step === this.domPanels.length - 1) {
          return this.domPanels.append($('<div class="buttonContainer"> <button class="prev">Previous</button> <button class="next hidden">Next</button> </div>'));
        } else {
          return this.domPanels.append($('<div class="buttonContainer"> <button class="prev">Previous</button> <button class="next">Next</button> </div>'));
        }
      };

      return tutorialHandler;

    })();
    gameLocation = (function() {

      /*
        Constructs the game location object
        @constructor
        @param {object} position
          The position of the location.
        @param {string} 
          The name of the location.
        @param {data}
          Metadata associated with this position.
        @param {boolean} rare
          Whether if the location is a rare location or not
        @param {string} icon
          The icon to use for this location.
       */
      function gameLocation(position, name1, data1, rare1, icon) {
        this.position = position;
        this.name = name1;
        this.data = data1;
        this.rare = rare1;
        this.icon = icon;
        this.marker;
        this.value;
        this.travelExpense;
        this.travelTime;
      }


      /*
        Adds the location to the map.
        @param {object} map
          The google map element to add to.
       */

      gameLocation.prototype.addTo = function(map) {
        var marker;
        if (this.icon) {
          marker = new google.maps.Marker({
            position: this.position,
            map: map,
            icon: this.icon,
            title: this.name
          });
        } else {
          marker = new google.maps.Marker({
            position: this.position,
            map: map,
            title: this.name
          });
        }
        this.marker = marker;
        return this.setListener(this.marker);
      };


      /*
        Sets event listeners on a marker
        @param {object} marker
          The google maps marker object to bind the event listener to.
       */

      gameLocation.prototype.setListener = function(marker) {
        var self;
        self = this;
        marker.addListener('click', function() {
          return player.moveTo(self);
        });
        return marker.addListener('mouseover', function() {
          var travelDistance, travelTime;
          travelDistance = parseInt(distanceTravelled(player.position, self.position));
          travelTime = travelDistance / 232;
          $('#locationInfoOverlay #title').text(self.data.description);
          $('#locationInfoOverlay #position').text('Distance away ' + travelDistance + 'km');
          $('#locationInfoOverlay #value').text('Potential Revenue $' + self.value);
          $('#locationInfoOverlay #travelExpense').text('Travel Expense $' + parseInt((travelDistance * 0.6) / 10));
          $('#locationInfoOverlay #travelTime').text('Travel Time: at least ' + travelTime.toFixed(2) + ' Hours');
          return this.value = self.value;
        });
      };

      return gameLocation;

    })();
    playerMarker = (function(superClass) {
      extend(playerMarker, superClass);


      /*
        Constructs the player marker object. Extends the game location object
        @constructor
        @param {object} position
          The position of the player.
        @param {string} 
          The name of the player.
        @param {data}
          Metadata associated with this player.
        @depreciated @param {string} icon
          The icon to use for this player.
        @param {object} stats
          JSON data of the player's stats.
       */

      function playerMarker(position, name1, data1, icon, stats1) {
        this.position = position;
        this.name = name1;
        this.data = data1;
        this.icon = icon;
        this.stats = stats1;
        playerMarker.__super__.constructor.call(this, this.position, this.name, this.data, this.icon);
        this.playerMarker;
        this.preStat;
        this.inventory = [];
      }


      /*
        Adds the player marker to the map.
        @param {object} map
          The google map element to add to.
       */

      playerMarker.prototype.initTo = function(map) {
        return this.playerMarker = new SlidingMarker({
          position: this.position,
          map: map,
          icon: 'https://developers.google.com/maps/documentation/javascript/images/custom-marker.png',
          title: this.name,
          optimized: false,
          zIndex: 100
        });
      };


      /*
        Moves the player marker to another location and calculates the result of moving to the location.
        @param {object} location
          gameLocation object, for the player marker to move to.
       */

      playerMarker.prototype.moveTo = function(location) {
        var newStats, randEvent, timeTaken;
        location.travelExpense = parseInt((distanceTravelled(this.position, location.position) * 0.6) / 10);
        location.travelTime = parseFloat((distanceTravelled(this.position, location.position) / 232).toFixed(2));
        this.position = location.position;
        this.playerAt = location;
        this.playerMarker.setPosition(new google.maps.LatLng(location.position.lat, location.position.lng));
        newStats = this.stats;
        newStats.CAB -= player.playerAt.travelExpense;
        timeTaken = location.travelTime + Math.random() * 5;
        gameTime.incrementTime(timeTaken);
        gameEvents.addEvent(new event('Moved to', gameTime.getFormatted(), location.name + ' in ' + timeTaken.toFixed(2) + ' hours'));
        $('#takePic').show();
        updateMarkers();
        this.updateStats(newStats);
        if (gameGlobal.init.isPlus) {
          randEvent = gameGlobal.turnConsts.randomEvents[Math.floor(Math.random() * gameGlobal.turnConsts.randomEvents.length)];
          return gameEvents.addEvent(randEvent);
        }
      };


      /*
        Depreciates the player's inventory.
       */

      playerMarker.prototype.depreciateInv = function() {
        var depreciation, item, j, len, newStats, ref;
        depreciation = 0;
        ref = this.inventory;
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          if (item.value < 1) {
            return;
          } else {
            depreciation += item.value - item.value * 0.9;
            item.value = item.value * 0.9;
          }
        }
        newStats = player.stats;
        newStats.assets -= depreciation.toFixed(2);
        if (depreciation > 0) {
          gameEvents.addEvent(new event('Depreciation - ', gameTime.getFormatted(), 'Photos depreciated by $' + depreciation.toFixed(2), false, true));
        }
        return this.updateStats(newStats);
      };


      /*
        Updates the player stats and animates it in the DOM.
        @param {object} stats
          The new stats to update to.
       */

      playerMarker.prototype.updateStats = function(stats) {
        var animateText, assets, workingCapital;
        animateText = function(elem, from, to) {
          return $({
            current: from
          }).animate({
            current: to
          }, {
            duration: 500,
            step: function() {
              return $('#playerInfoOverlay #stats ' + elem + ' .val').text(this.current.toFixed());
            }
          });
        };
        assets = parseInt(this.stats.assets + this.stats.CAB);
        workingCapital = parseInt(assets - this.stats.liabilities);
        animateText('#CAB', parseInt($('#playerInfoOverlay #stats #CAB .val').text()), stats.CAB);
        animateText('#liabilities', parseInt($('#playerInfoOverlay #stats #liabilities .val').text()), stats.liabilities);
        animateText('#assets', parseInt($('#playerInfoOverlay #stats #assets .val').text()), assets);
        animateText('#workingCapital', parseInt($('#playerInfoOverlay #stats #workingCapital .val').text()), workingCapital);
        this.preStat = {
          CAB: stats.CAB,
          workingCapital: workingCapital,
          assets: assets,
          liabilities: stats.liabilities
        };
        if (workingCapital <= -1000 && this.stats.CAB <= 0) {
          return $('#playerInfoOverlay #stats #workingCapital, #playerInfoOverlay #stats #CAB').css('color', 'red');
        } else {
          $('#playerInfoOverlay #stats #workingCapital, #playerInfoOverlay #stats #CAB').css('color', '');
          return gameGlobal.turnConsts.alert = false;
        }
      };

      return playerMarker;

    })(gameLocation);
    timeManager = (function() {

      /*
        Constructs the time manager object.
        @constructor
        @param {array} baseTime
          The initial date/time to start the game with.
       */
      function timeManager(baseTime) {
        this.baseTime = baseTime;
        this.timeCounter = 0;
        this.dateCounter = 0;
        this.monthCounter = 0;
        this.yearCounter = 0;
      }


      /*
        Increases the game time by hours.
        @param {integer} hours
          The hours to increase the game time by.
       */

      timeManager.prototype.incrementTime = function(hours) {
        var results1;
        this.timeCounter += hours;
        results1 = [];
        while (this.timeCounter >= 24) {
          this.incrementDays(1);
          this.timeCounter -= 24;
          if (this.timeCounter < 24) {
            this.timeCounter = this.timeCounter % 24;
            break;
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      };


      /*
        Increases the game time by days.
        @param {integer} days
          The days to increase the game time by.
       */

      timeManager.prototype.incrementDays = function(days) {
        var results1;
        this.dateCounter += days;
        player.depreciateInv();
        results1 = [];
        while (this.dateCounter >= 30) {
          this.incrementMonths(1);
          this.dateCounter -= 30;
          endTurn(this.getFormatted());
          if (this.dateCounter < 30) {
            this.dateCounter = this.dateCounter % 30;
            break;
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      };


      /*
        Increases the game time by months.
        @param {integer} months
          The monthes to increase the game time by.
       */

      timeManager.prototype.incrementMonths = function(months) {
        var results1;
        this.monthCounter += months;
        results1 = [];
        while (this.monthCounter >= 12) {
          this.incrementYears(1);
          this.monthCounter -= 12;
          if (this.monthCounter < 12) {
            this.monthCounter = this.monthCounter % 12;
            break;
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      };


      /*
        Increases the game time by years.
        @param {integer} years
          The years to increase the game time by.
       */

      timeManager.prototype.incrementYears = function(years) {
        return this.yearCounter += years;
      };


      /*
        Gets the current game time.
        @return
          Array containing the game time.
       */

      timeManager.prototype.getAll = function() {
        return [this.baseTime[0] + this.yearCounter, this.baseTime[1] + this.monthCounter, this.baseTime[2] + this.dateCounter, parseInt(this.baseTime[3]) + this.timeCounter];
      };


      /*
        Gets the formatted current game time.
        @return
          Stringified and formatted game time.
       */

      timeManager.prototype.getFormatted = function() {
        var date, hours, minutes, month, year;
        year = this.baseTime[0] + this.yearCounter;
        month = this.baseTime[1] + this.monthCounter;
        date = this.baseTime[2] + this.dateCounter;
        hours = parseInt(this.baseTime[3]) + this.timeCounter;
        minutes = parseInt((hours - Math.floor(hours)) * 60);
        if (date > 30) {
          date -= date - 30;
        }
        if (String(parseInt(minutes)).length === 2) {
          return year + '/' + month + '/' + date + ' ' + String(Math.floor(hours)) + ':' + String(parseInt(minutes));
        } else {
          return year + '/' + month + '/' + date + ' ' + String(Math.floor(hours)) + ':' + String(parseInt(minutes)) + '0';
        }
      };

      return timeManager;

    })();
    eventManager = (function() {

      /*
        Constructs the event manager to handles all events.
        @constructor
        @param {DOMElement} domSelector
          The DOM element to display the event on.
       */
      function eventManager(domSelector, domOverlay) {
        this.domSelector = domSelector;
        this.domOverlay = domOverlay;
        this.events = [];
      }


      /*
        Adds a event to the event manager
        @param {object} event
          The event object to add to the event manager.
       */

      eventManager.prototype.addEvent = function(event) {
        var effectName, j, len, newStats, ref;
        if (event.time === 'currentTime') {
          event.time = gameTime.getFormatted();
        }
        if (event.constructor.name === 'randomEvent') {
          if (Math.random() * 100 < event.chance) {
            gameInsanity.updateBar(event.incInsanity);
          }
          if (event.effects) {
            ref = Object.keys(event.effects);
            for (j = 0, len = ref.length; j < len; j++) {
              effectName = ref[j];
              newStats = player.stats[effectName] += event.effects[effectName];
            }
            player.updateStats(newStats);
          }
          return this.domOverlay.show();
        } else {
          this.events.push(event);
          if (event.warn) {
            return $('<div class="row"> <p class="time">' + event.time + '</p> <p class="title warn">' + event.title + '</p> <p class="content">' + event.content + '</p> </div>').hide().prependTo(this.domSelector).fadeIn();
          } else if (event.special) {
            return $('<div class="row"> <p class="time special">' + event.time + '</p> <p class="title special">' + event.title + '</p> <p class="content special">' + event.content + '</p> </div>').hide().prependTo(this.domSelector).fadeIn();
          } else {
            return $('<div class="row"> <p class="time">' + event.time + '</p> <p class="title">' + event.title + '</p> <p class="content">' + event.content + '</p> </div>').hide().prependTo(this.domSelector).fadeIn();
          }
        }
      };

      return eventManager;

    })();
    playerInsanity = (function() {
      function playerInsanity(domSelector, initVal) {
        this.domSelector = domSelector;
        this.initVal = initVal;
      }

      playerInsanity.prototype.updateBar = function(value) {};

      return playerInsanity;

    })();

    /*
      Processes and validates an array of data.
      @param {array} data
        The set of data to process.
    
      @return
        The array of processed data/
     */
    processData = function(data) {
      var item, j, len, processedData, ref;
      processedData = [];
      ref = data.result.records;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (item['dcterms:spatial']) {
          if (item['dcterms:spatial'].split(';')[1]) {
            processedData.push(item);
          }
        }
      }
      return processedData;
    };

    /*
      Generates google map markers from a set of data
      @param {array} data
        The set of data to generate markers from.
     */
    generateMarkers = function(data) {
      var i, j, lat, len, lng, marker, place;
      marker = [];
      i = 0;
      for (j = 0, len = data.length; j < len; j++) {
        place = data[j];
        lat = parseFloat(place['dcterms:spatial'].split(';')[1].split(',')[0]);
        lng = parseFloat(place['dcterms:spatial'].split(';')[1].split(',')[1]);
        marker[i] = new gameLocation({
          lat: lat,
          lng: lng
        }, place['dcterms:spatial'].split(';')[0], {
          'title': place['dc:title'],
          'description': place['dc:description'],
          'img': place['150_pixel_jpg']
        }, false);
        marker[i].addTo(googleMap);
        locations.push(marker[i]);
        setValue(marker[i]);
        i++;
      }
      return updateMarkers();
    };

    /*
      Sets the value of a given location based on the distance from the player.
      @param {object} location
        gameLocation object to set the value by.
     */
    setValue = function(location) {
      var rare;
      rare = Math.random() <= 0.05;
      if (rare) {
        location.value = parseInt(Math.random() * distanceTravelled(player.position, location.position) + 100);
        return location.rare = true;
      } else {
        return location.value = parseInt((Math.random() * distanceTravelled(player.position, location.position) + 100) / 10);
      }
    };

    /*
      Updates the markers as the user player moves.
      @see playerMarker.prototype.moveTo()
     */
    updateMarkers = function() {
      var hide, j, len, location, results1, show;
      results1 = [];
      for (j = 0, len = locations.length; j < len; j++) {
        location = locations[j];
        hide = Math.random() >= 0.8;
        show = Math.random() <= 0.2;
        if (hide) {
          results1.push(location.marker.setVisible(false));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    /*
      Instantiate the game components.
     */
    gameEvents = new eventManager($('#eventLog .eventContainer'), $('#randomEventOverlay'));
    gameTime = new timeManager([1939, 1, 1, 0]);
    gameTutorial = new tutorialHandler($('.tutorial'));
    gameInsanity = new playerInsanity($('#insanityBar'), 0);
    player = new playerMarker({
      lat: -25.363,
      lng: 151.044
    }, 'player', {
      'type': 'self'
    }, 'https://developers.google.com/maps/documentation/javascript/images/custom-marker.png');
    player.initTo(googleMap);
    player.stats = gameGlobal.init.stats;
    player.updateStats(player.stats);
    photographyGame = (function() {

      /*
        Constructs the photography game.
        @constructor
        @param {boolean} debug
          The debug state of the game.
       */
      function photographyGame(debug) {
        this.debug = debug;
        this.score = 0;
      }


      /*
        Initialize the photography game.
        @param {integer} amount
          The amount of markers to initialize the game with.
       */

      photographyGame.prototype.init = function(amount) {
        var localInit;
        localInit = function() {
          validData.sort(function() {
            return 0.5 - Math.random();
          });
          generateMarkers(validData.slice(0, amount));
          gameTutorial.init();
          return gameEvents.addEvent(new event('Game started', gameTime.getFormatted(), ''));
        };
        if (localStorage.getItem('photographyGameData')) {
          validData = processData(JSON.parse(localStorage.getItem('photographyGameData')));
          if (amount > validData.length) {
            return retrieveResources(3000).then(function(res) {
              localStorage.setItem('photographyGameData', JSON.stringify(res));
              validData = processData(res);
              return localInit();
            });
          } else {
            return localInit();
          }
        } else {
          return retrieveResources(3000).then(function(res) {
            localStorage.setItem('photographyGameData', JSON.stringify(res));
            validData = processData(res);
            return localInit();
          });
        }
      };

      return photographyGame;

    })();

    /*
      Instantiate the photography game.
     */
    currentGame = new photographyGame(false);
    if (getParam('diff') === 'normal') {
      currentGame.init(100);
    } else if (getParam('diff') === 'extended') {
      currentGame.init(500);
    }

    /*
      Displays the end game screen.
     */
    endGame = function() {
      $('#gameEnd .stat').text('You survived for ' + gameGlobal.trackers.monthPassed + ' Months, selling ' + gameGlobal.trackers.photosSold + ' photos and making over $' + gameGlobal.trackers.moneyEarned);
      currentGame.score = gameGlobal.trackers.monthPassed * gameGlobal.trackers.photosSold * gameGlobal.trackers.moneyEarned;
      $('#gameEnd .score').text('Your score: ' + currentGame.score + ' pt');
      return $('#gameEnd').show();
    };

    /*
      Ends the month.
      @param {string} date
        The date which the month ended on.
     */
    endTurn = function(date) {
      var j, len, location, newStats, results1, show;
      if (gameGlobal.init.isStory && gameGlobal.trackers.monthPassed >= 6) {
        $('#gameEnd h4').text('You recieve a letter from the army. Now you can finally join the front lines.');
        $('#gameEnd .score').hide();
        endGame();
      }
      gameGlobal.turnConsts.interest = (Math.random() * 5).toFixed(2);
      gameEvents.addEvent(new event('The month comes to an end.', date, 'Paid $' + player.stats.liabilities + ' in expenses', true));
      newStats = player.stats;
      newStats.CAB -= player.stats.liabilities;
      newStats.liabilities = gameGlobal.turnConsts.stdLiabilities;
      player.updateStats(newStats);
      if (player.preStat.workingCapital <= -1000 && player.preStat.CAB <= 0) {
        if (gameGlobal.turnConsts.alert) {
          endGame();
        } else {
          gameGlobal.trackers.monthPassed += 1;
        }
        gameGlobal.turnConsts.alert = true;
      } else {
        gameGlobal.trackers.monthPassed += 1;
      }
      if (gameGlobal.turnConsts.alert && player.preStat.workingCapital > -1000 && player.preStat.CAB > 0) {
        gameGlobal.turnConsts.alert = false;
      }
      results1 = [];
      for (j = 0, len = locations.length; j < len; j++) {
        location = locations[j];
        show = Math.random() > 0.2;
        if (show) {
          results1.push(location.marker.setVisible(true));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    /*
      Displays the taking picture screen.
     */
    $('#takePic').hide();
    $('#takePic').click(function() {
      $('#takingPic .section3').css('width', (Math.floor(Math.random() * (10 + 2))) + 1 + '%');
      $('#takingPic .section2').css('width', (Math.floor(Math.random() * (19 + 2))) + '%');
      $('#takingPic .section4').css('width', (Math.floor(Math.random() * (19 + 2))) + '%');
      $('#takingPic .slider').css('left', 0);
      $('#takingPic .start, #takingPic .stop').prop('disabled', false);
      $('#takingPic .shotStats').hide();
      $('#takingPic').show();
      $('#takingPic .viewInv').hide();
      $('#takingPic .close').hide();
      return $(this).hide();
    });

    /*
      Starts the animation of the slider when taking the picture.
     */
    $('#takingPic .start').click(function() {
      $(this).prop('disabled', true);
      return $('#takingPic .slider').animate({
        'left': $('#takingPic .section1').width() + $('#takingPic .section2').width() + $('#takingPic .section3').width() + $('#takingPic .section4').width() + $('#takingPic .section5').width() + 'px'
      }, 1000, function() {
        return calculatePicValue();
      });
    });

    /*
      Ends the animation of the slider when taking the picture.
     */
    $('#takingPic .stop').click(function() {
      $(this).prop('disabled', true);
      $('#takingPic .slider').stop();
      $('#takingPic .close').show();
      return calculatePicValue();
    });

    /*
      Calculates the value of the picture based on the slider position.
     */
    calculatePicValue = function() {
      var inBlue, inGreen, multiplier, quailty, sliderPosition, timeTaken;
      $('#takingPic .viewInv').show();
      $('#takingPic .shotStats').show();
      multiplier = 1;
      quailty = 1;
      sliderPosition = parseInt($('#takingPic .slider').css('left'), 10);
      inBlue = ($('#takingPic .section1').position().left + $('#takingPic .section1').width()) <= sliderPosition && sliderPosition <= $('#takingPic .section5').position().left;
      inGreen = ($('#takingPic .section2').position().left + $('#takingPic .section2').width()) <= sliderPosition && sliderPosition <= $('#takingPic .section4').position().left;
      if (inBlue && inGreen) {
        multiplier = 1.4;
        quailty = 0;
        $('.shotStats').text('You take a high quailty photo, this will surely sell for more!');
      } else if (inBlue) {
        $('.shotStats').text('You take a average photo.');
      } else {
        multiplier = 0.8;
        quailty = 2;
        $('.shotStats').text('The shot comes out all smudged...');
      }
      addShotToInv(multiplier, quailty);
      timeTaken = Math.floor(Math.random() * 10) + 24;
      gameTime.incrementTime(timeTaken);
      gameEvents.addEvent(new event('Taking Pictures', gameTime.getFormatted(), 'You spend some time around ' + player.playerAt.name + '. ' + timeTaken + ' hours later, you finally take a picture of value.'));
      if (player.playerAt.rare) {
        gameEvents.addEvent(new event('Rare Picture -', gameTime.getFormatted(), 'You take a rare picture.', true));
        if (!gameGlobal.init.isStory) {
          if ($('#savePicOverlay .img img').length === 0) {
            $('#savePicOverlay .img').append($('<img src="' + player.playerAt.data.img + '">'));
          } else {
            $('#savePicOverlay .img img').attr('src', player.playerAt.data.img);
          }
          $('#savePicOverlay .title').text(player.playerAt.data.title);
          $('#savePicOverlay #confirmSavePic').prop('disabled', false);
          return $('#savePicOverlay').show();
        }
      }
    };

    /*
      Instantiate the game photo object and adds a photographic shot to the inventory
      @param {integer} multiplier
        The scalar to multiple the value of the shot by.
      @param {integer} quailty
        The quailty of the picture.
     */
    addShotToInv = function(multiplier, quailty) {
      var newStats, photoValue, shotTaken;
      photoValue = player.playerAt.value * multiplier;
      shotTaken = new gamePhoto(photoValue, false, player.playerAt.data.img, player.playerAt.data.title, quailty);
      player.inventory.push(shotTaken);
      player.playerAt.marker.setVisible(false);
      newStats = player.stats;
      newStats.assets += photoValue;
      newStats.workingCapital -= player.playerAt.travelExpense / 2;
      return player.updateStats(newStats);
    };

    /*
      Displays the player inventory and closes previous element's parent.
     */
    $('.viewInv').click(function() {
      closeParent(this);
      return displayInv();
    });

    /*
      Displays the player inventory.
     */
    $('#checkInv').click(function() {
      return displayInv();
    });

    /*
      Generates the player inventory.
     */
    displayInv = function() {
      var item, j, len, picture, pictureContainer, potentialValue, ref, sellableValue;
      $('#blockOverlay').show();
      $('#inventory .photoContainer').remove();
      $('#inventory').show();
      potentialValue = 0;
      sellableValue = 0;
      ref = player.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        pictureContainer = $('<div class="photoContainer"></div>');
        picture = $('<div class="crop"> <img class="photo" src="' + item.img + '"/> </div>').css('filter', 'blur(' + item.quailty + 'px');
        picture.appendTo(pictureContainer);
        if (!item.washed) {
          pictureContainer.appendTo($('#inventory .cameraRoll'));
          potentialValue += item.value;
        } else {
          pictureContainer.appendTo($('#inventory .washedPics'));
          sellableValue += item.value;
        }
        $('<aside> <p>Value $' + parseInt(item.value) + '</p> <p>' + item.title + '</p> </aside>').appendTo(pictureContainer);
      }
      $('#rollValue').text('Total value $' + parseInt(potentialValue + sellableValue));
      return $('#sellableValue').text('Sellable Pictures value $' + parseInt(sellableValue));
    };

    /*
      Displays the waiting screen.
     */
    $('#wait').click(function() {
      if ($('#waitTimeInput').val() === '') {
        $('#waitTimeInput').parent().find('button.confirm').prop('disabled', true);
      }
      return $('#waitInfo').show();
    });

    /*
      Waits and passes the game time.
     */
    $('#confirmWait').click(function() {
      var j, len, location, results1, show;
      gameTime.incrementDays(parseInt($('#waitTimeInput').val()));
      if (parseInt($('#waitTimeInput').val()) !== 1) {
        gameEvents.addEvent(new event('', gameTime.getFormatted(), 'You wait ' + $('#waitTimeInput').val() + ' days'));
      } else {
        gameEvents.addEvent(new event('', gameTime.getFormatted(), 'You wait ' + $('#waitTimeInput').val() + ' day'));
      }
      validData.sort(function() {
        return 0.5 - Math.random();
      });
      generateMarkers(validData.slice(0, parseInt($('#waitTimeInput').val()) / 2));
      results1 = [];
      for (j = 0, len = locations.length; j < len; j++) {
        location = locations[j];
        show = Math.floor(Math.random() * 30) <= parseInt($('#waitTimeInput').val()) / 2;
        if (show) {
          results1.push(location.marker.setVisible(true));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    });

    /*
      Displays the pictures avaliable for washing.
     */
    $('#washPic').click(function() {
      var item, j, k, len, len1, notWashed, ref, ref1;
      notWashed = [];
      ref = player.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (!item.washed) {
          notWashed.push(item);
        }
      }
      if (notWashed.length === 0) {
        $('#washPicOverlay p').text('There are no pictures to wash.');
        $('#washPicOverlay').show();
        return $('#washPicOverlay #confirmWashPic').hide();
      } else {
        ref1 = player.inventory;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          item = ref1[k];
          item.washed = true;
        }
        $('#washPicOverlay p').text('Washing photos takes ' + gameGlobal.turnConsts.pictureWashingTime + ' days. Proceed?');
        $('#washPicOverlay').show();
        return $('#washPicOverlay #confirmWashPic').show();
      }
    });

    /*
      Washes all unwashed pictures in the player's inventory.
     */
    $('#confirmWashPic').click(function() {
      gameTime.incrementTime(10 * Math.random());
      gameTime.incrementDays(gameGlobal.turnConsts.pictureWashingTime);
      return gameEvents.addEvent(new event('Washed pictures.', gameTime.getFormatted(), 'You wash all pictures in your camera.'));
    });

    /*
      Displays the take loan screen.
     */
    $('#takeLoan').click(function() {
      $('#IR').text('Current interest rate ' + gameGlobal.turnConsts.interest + '%');
      if ($('#loanInput').val() === '') {
        $('#loanInput').parent().find('button.confirm').prop('disabled', true);
      }
      return $('#loanOverlay').show();
    });

    /*
      Confirms the loan to the player.
     */
    $('#confirmLoan').click(function() {
      var newStats;
      newStats = player.stats;
      newStats.liabilities += parseInt($('#loanInput').val()) + parseInt($('#loanInput').val()) * (gameGlobal.turnConsts.interest / 10);
      newStats.CAB += parseInt($('#loanInput').val());
      player.updateStats(newStats);
      return gameEvents.addEvent(new event('Bank loan.', gameTime.getFormatted(), 'You take a bank loan of $' + parseInt($('#loanInput').val())));
    });

    /*
      Validates the input to ensure the input is a number and non empty.
     */
    $('#loanInput, #waitTimeInput').keyup(function() {
      if (!$.isNumeric($(this).val()) || $(this).val() === '') {
        $(this).parent().find('.err').text('*Input must be a number');
        return $(this).parent().find('button.confirm').prop('disabled', true);
      } else {
        $(this).parent().find('.err').text('');
        return $(this).parent().find('button.confirm').prop('disabled', false);
      }
    });

    /*
      Displays the sell pictures screen.
     */
    $('#sellPic').click(function() {
      var j, len, photo, photosValue, ref, sellablePhotos;
      sellablePhotos = 0;
      photosValue = 0;
      ref = player.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        photo = ref[j];
        if (photo.washed) {
          sellablePhotos += 1;
          photosValue += photo.value;
        }
      }
      $('#soldInfoOverlay p').text('Potential Earnings $' + parseInt(photosValue) + ' from ' + sellablePhotos + ' Photo/s');
      if (sellablePhotos === 0) {
        $('#soldInfoOverlay button').hide();
      } else {
        $('#soldInfoOverlay button').show();
      }
      return $('#soldInfoOverlay').show();
    });

    /*
      Sells the washed photos in the player's inventory.
     */
    $('#sellPhotos').click(function() {
      var earningsAct, earningsEst, j, len, newInventory, newStats, photo, photosSold, ref, timeTaken;
      photosSold = 0;
      earningsEst = 0;
      earningsAct = 0;
      newInventory = [];
      newStats = player.stats;
      ref = player.inventory;
      for (j = 0, len = ref.length; j < len; j++) {
        photo = ref[j];
        if (photo.washed) {
          earningsAct += parseInt(photo.value + (photo.value * Math.random()));
          earningsEst += photo.value;
          photosSold += 1;
          gameGlobal.trackers.photosSold += 1;
          gameGlobal.trackers.moneyEarned += earningsAct;
        } else {
          newInventory.push(photo);
        }
      }
      timeTaken = ((Math.random() * 2) + 1) * photosSold;
      player.inventory = newInventory;
      newStats.CAB += earningsAct;
      newStats.assets -= earningsEst;
      player.updateStats(newStats);
      gameTime.incrementDays(parseInt(timeTaken));
      if (parseInt(timeTaken) === 1) {
        return gameEvents.addEvent(new event('Selling Pictures.', gameTime.getFormatted(), 'It took ' + parseInt(timeTaken) + ' day to finally sell everything. Earned $' + earningsAct + ' from selling ' + photosSold + ' Photo/s.'));
      } else {
        return gameEvents.addEvent(new event('Selling Pictures.', gameTime.getFormatted(), 'It took ' + parseInt(timeTaken) + ' days to finally sell everything. Earned $' + earningsAct + ' from selling ' + photosSold + ' Photo/s.'));
      }
    });

    /*
      Blocks the game when a overlay/interface is active.
     */
    $('#actions button').click(function() {
      return $('#blockOverlay').show();
    });

    /*
      Closes the overlay.
     */
    $('.confirm, .close').click(function() {
      return closeParent(this);
    });

    /*
      Saves the DOM element to the player's collection.
     */
    $('#confirmSavePic').click(function() {
      saveItem($('#savePicOverlay .img img').attr('src'), $('#savePicOverlay .title').text());
      return $(this).prop('disabled', true);
    });

    /*
      Closes the parent of the original DOM element
      @param {DOMElement} self
        The element whose parent should be hidden.
     */
    closeParent = function(self) {
      $(self).parent().hide();
      $('#blockOverlay').hide();
      return $('.status').text('');
    };

    /*
      jQuery UI draggable handler.
     */
    $('#actions').draggable();
    $('#actions').mousedown(function() {
      return $('#actions p').text('Actions');
    });

    /*
      Saves the current user score.
     */
    $('#saveScore').click(function() {
      return currentGame.saveScore();
    });

    /*
      Binds the generated buttons to the click event.
     */
    $('body').on('click', '.tutorial .next', function() {
      return gameTutorial.next();
    });
    return $('body').on('click', '.tutorial .prev', function() {
      return gameTutorial.prev();
    });
  });

}).call(this);
