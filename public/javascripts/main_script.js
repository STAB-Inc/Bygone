// Generated by CoffeeScript 1.12.7

/*
  @file
  Global scripts for BYGONE.
 */

(function() {
  $(document).ready(function() {

    /*
      Submits session data to the server. 
      @param {Object} data - the data to be submitted.
      @return AJAX deferred promise.
     */
    var imagesTotal, load, loaded, navToggle, navToggled, segment, submitUserData, toHash, userLogToggle, userToggled;
    submitUserData = function(data) {
      return $.ajax({
        url: '/routes/user.php',
        type: 'POST',
        data: data
      });
    };

    /*
      Gets the active user.
     */
    submitUserData({
      method: 'getActiveUser'
    }).then(function(res) {
      res = JSON.parse(res);
      if (res.status === 'success') {
        $('.formContainer').hide();
        return submitUserData({
          method: 'getUserData',
          id: res.message
        }).then(function(userData) {
          var amt, i, item, j, key, len, len1, ref, ref1;
          userData = JSON.parse(userData);
          $('#activeUserMsg').show();
          $('#activeUserMsg p').text('Welcome ' + userData.username);
          ref = Object.keys(userData.unlockables);
          for (i = 0, len = ref.length; i < len; i++) {
            key = ref[i];
            if (userData.unlockables[key]) {
              $('#' + key).removeClass('locked');
              $('#g' + key).find('.locked').hide();
              $('#' + key).find('.stateContainer').css('opacity', 0);
            }
          }
          amt = 0;
          ref1 = userData.collections;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            item = ref1[j];
            amt += 1;
            $('.userProfile .collections').append($('<div class="collection"> <img src="' + item[1] + '"> <p>' + item[0] + '</p> </div>'));
          }
          return $('.colAmt').text(amt + ' Item/s');
        });
      } else {
        return $('.save').hide();
      }
    });

    /*
      Creates a new user.
     */
    $('#newUser').submit(function(e) {
      e.preventDefault();
      if ($('#newUser #password').val() !== $('#newUser #cPassword').val()) {
        $('#newUser').find('.error').text('Password do not match.');
        return 0;
      }
      if ($('#newUser #password').val() === '' || $('#newUser #cPassword').val() === '' || $('#newUser #username').val() === '') {
        $('#newUser').find('.error').text('Field cannot be empty');
        return 0;
      }
      return submitUserData({
        method: 'new',
        username: $('form#newUser #username').val(),
        password: $('form#newUser #password').val()
      }).then(function(res) {
        res = JSON.parse(res);
        if (res.status === 'error') {
          return $('#newUser').find('.error').text(res.message);
        } else {
          return location.reload();
        }
      });
    });

    /*
      Logs users in.
     */
    $('#loginUser').submit(function(e) {
      e.preventDefault();
      return submitUserData({
        method: 'login',
        username: $('form#loginUser #username').val(),
        password: $('form#loginUser #password').val()
      }).then(function(res) {
        res = JSON.parse(res);
        if (res.status === 'error') {
          return $('#loginUser').find('.error').text(res.message);
        } else {
          return location.reload();
        }
      });
    });

    /*
      Toggles the navigation.
     */
    navToggle = function() {
      var navToggled;
      navToggled = !navToggled;
      $('nav#global').toggleClass('navOn');
      return $('.ionClose, .ionOpen').toggleClass('buttonActive');
    };

    /*
      Initial navigation menu status.
     */
    navToggled = false;

    /*
      Toggles user profile.
     */
    userLogToggle = function() {
      var userToggled;
      userToggled = !userToggled;
      if (userToggled) {
        return $('.userProfile').fadeIn();
      }
    };
    userToggled = false;

    /*
      Shows/Hides the navigation.
     */
    $('#navToggle, .navContainer').click(function() {
      return navToggle();
    });

    /*
      Shows/Hides the user profile.
     */
    $('.viewProf').click(function() {
      return userLogToggle();
    });

    /*
      Scrolls the user to a section.
      @param {string} hash - the element with the hash to scroll to.
     */
    toHash = function(hash) {
      return $('body').animate({
        'scrollTop': $(hash).offset().top
      }, 750);
    };

    /*
      Page transitions.
     */
    $('a').click(function(e) {
      var href;
      e.preventDefault();
      if ($(this).find('.chapter').hasClass('locked')) {
        $(this).find('.stateContainer i').animate({
          color: 'red'
        }, 500, function() {
          return $(this).animate({
            color: 'white'
          }, 500);
        });
        return 0;
      }
      href = $(this).attr('href');
      if (href.charAt(0) === '#') {
        return toHash(href);
      } else {
        $('#loader').show();
        $('#loader').css('opacity', 1);
        $('#loader').empty();
        return $('#loader').animate({
          'left': '0px'
        }, 50, function() {
          return setTimeout(function() {
            return window.location = href;
          }, 1000);
        });
      }
    });

    /*
      Loads the page by removing the loading screen.
     */
    load = function() {
      $('#loader').css({
        'opacity': 0,
        'pointer-events': 'none'
      });
      if (window.location.pathname.split("/").pop() !== 'game.Shooting.html') {
        $('body').css('overflow-y', 'auto');
      }
      return setTimeout(function() {
        return $('#loader').css({
          'display': 'none',
          'left': -1 * $('#loader').width()
        });
      }, 1000);
    };

    /*
      Images loaded plugin, waits for all images to load and fires a event once complete.
     */
    imagesTotal = $('img').length;
    segment = 100 / imagesTotal;
    loaded = 0;
    $(document).imagesLoaded().progress(function(instance, image) {
      if (image.isLoaded) {
        loaded += segment;
        setTimeout(function() {
          return $('#loader .loaderBar').css('width', loaded + '%');
        }, 100);
      } else {
        $('.failed').append('<p>Fail to load: ' + image.img.src + '</p>');
      }
    }).done(function() {
      return setTimeout(function() {
        return load();
      }, 500);
    });

    /*
      Hides overlays.
     */
    $('.close, .closeForm').click(function() {
      return $(this).parent().fadeOut();
    });

    /*
      Show overlays.
     */
    $('.show').click(function() {
      return $($(this).attr('target')).fadeIn();
    });

    /*
      Stops button redirects.
     */
    $('button').click(function(e) {
      return e.preventDefault();
    });

    /*
      Log out the current user.
     */
    $('#userActions .logout').click(function() {
      return submitUserData({
        method: 'logout'
      }).then(function(res) {
        res = JSON.parse(res);
        if (res.status === 'success') {
          return location.reload();
        }
      });
    });

    /*
      Deletes the user's account.
     */
    return $('#userActions .deleteAcc').click(function() {
      return submitUserData({
        method: 'deleteUser'
      }).then(function(res) {
        res = JSON.parse(res);
        if (res.status === 'success') {
          return location.reload();
        }
      });
    });
  });

}).call(this);
